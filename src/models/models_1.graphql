type UserSchema_3 @createModel(description: "A User Model")
    @createIndex(fields: [{path: "userAddress"}, {path: "username"}])
{
  userAddress: String! @string(maxLength: 100)
  username: String! @string(minLength:3, maxLength: 100)
  bio: String! @string(maxLength: 500)
  profilepic: String! @string(maxLength: 100)
}  


input UserSchemaFiltersInput {
  userAddress: StringFilterInput
  username: StringFilterInput
  bio: StringFilterInput
}

input StringFilterInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  contains: String
  ncontains: String
}
 

type PostSchema_6 @createModel(description: "A Model that Maps Likes to Posts")
    @createIndex(fields: [{path: "PostID"}])
{
    PostID: String! @string(maxLength: 100)
    PostLikesHash: [String!]! @list(maxLength: 10000) @string(maxLength: 10000000)
}

input PostSchemaFiltersInput {
  PostID: StringFilterInput
  PostLikesHash: StringListFilterInput
}

input StringFilterInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  contains: String
  ncontains: String
}

input StringListFilterInput {
  eq: [String]
  ne: [String]
  contains: [String]
  ncontains: [String]
  in: [[String]]
  nin: [[String]]
}

type FriendshipSchema_3 @createModel(description: "A Model to Manage Friendships and Proofs") {
  requesterAddress: String! @string(maxLength: 100)
  requesteeAddress: String! @string(maxLength: 100)
  friendshipProof: String! @string(maxLength: 10000) # The cryptographic proof
  status: FriendshipStatus! # The status of the friendship request placed in an enum type
}


enum FriendshipStatus {
  PENDING
  CONFIRMED
  DECLINED
}


input FriendshipSchemaFiltersInput {
  requesterAddress: StringFilterInput
  requesteeAddress: StringFilterInput
  friendshipProof: StringFilterInput
  status: FriendshipStatusFilterInput
}


input FriendshipStatusFilterInput {
  eq: FriendshipStatus
  ne: FriendshipStatus
  in: [FriendshipStatus]
  nin: [FriendshipStatus]
}
